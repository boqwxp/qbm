%header{
# include <istream>
  class Lib;
  class SVal;
}

%class QdlParser {
  std::istream &m_in;
  Lib          &m_lib;

  //- Life Cycle ---------------------------------------------------------------
public:
  QdlParser(std::istream &in, Lib &lib) : m_in(in), m_lib(lib) { parse(); }
  ~QdlParser() {}

  //- Parser Interface Methods -------------------------------------------------
private:
  void error(std::string  msg);
  unsigned nextToken(YYSVal &sval);

  //- Private Parser Helpers ---------------------------------------------------
private:

  //- Usage Interface ----------------------------------------------------------
public:
}

%sval SVal
%impl {
# include "QdlParser.hpp"

# include "Expression.hpp"
# include "Statement.hpp"
# include "CompDecl.hpp"
# include "Lib.hpp"
# include <cctype>
# include <memory>

  void QdlParser::error(std::string  msg) {
    std::cerr << msg << std::endl;
    throw  msg;
  }

  class SVal {
    class Box {
    protected:
      Box() {}
      ~Box() {}
    };

    class Name : public Box {
      std::string const  m_val;
    public:
      Name(std::string const &val) : m_val(val) {}
      ~Name() {}
    public:
      std::string const& value() const { return  m_val; }
    };

    class Number : public Box {
      unsigned const  m_val;
    public:
      Number(unsigned const  val) : m_val(val) {}
      ~Number() {}
    public:
      unsigned value() const { return  m_val; }
    };

    class Expr : public Box {
      std::shared_ptr<Expression const> const  m_val;
    public:
      Expr(std::shared_ptr<Expression const> const &val) : m_val(val) {}
      ~Expr() {}
    public:
      std::shared_ptr<Expression const> const& value() const { return  m_val; }
    };

    class Bus : public Name {
      std::shared_ptr<Expression const> const  m_width;
    public:
      Bus(std::string const &name,
	  std::shared_ptr<Expression const> const &width)
	: Name(name), m_width(width) {}
      ~Bus() {}
    public:
      std::shared_ptr<Expression const> const& width() const { return  m_width; }
    };

    class Stmt : public Box {
      std::shared_ptr<Statement> const  m_val;
    public:
      Stmt(std::shared_ptr<Statement> const &val) : m_val(val) {}
      ~Stmt() {}
    public:
      std::shared_ptr<Statement> const& value() const { return  m_val; }
    };

    class Comp : public Box {
      CompDecl &m_val;
    public:
      Comp(CompDecl &val) : m_val(val) {}
      ~Comp() {}
    public:
      CompDecl& value() { return  m_val; }
    };

    std::shared_ptr<Box>  contents;

  public:
    SVal() {}
    ~SVal() {}

    // Setting
  public:
    SVal& operator=(std::string const& val) {
      contents.reset(new Name(val));
      return *this;
    }
    SVal& operator=(unsigned const  val) {
      contents.reset(new Number(val));
      return *this;
    }
    SVal& operator=(std::shared_ptr<Expression const> const &val) {
      contents.reset(new Expr(val));
      return *this;
    }
    SVal& operator=(std::shared_ptr<Statement> const &val) {
      contents.reset(new Stmt(val));
      return *this;
    }
    SVal& operator=(CompDecl &val) {
      contents.reset(new Comp(val));
      return *this;
    }
    SVal& makeBus(std::string                       const &name,
		  std::shared_ptr<Expression const> const &width) {
      contents.reset(new Bus(name, width));
      return *this;
    }

    // Querying
  public:
    std::string const& name() const {
      return  static_cast<Name&>(*contents).value();
    }
    unsigned number() const {
      return  static_cast<Number&>(*contents).value();
    }
    std::shared_ptr<Expression const> const& expr() const {
      return  static_cast<Expr&>(*contents).value();
    }
    std::shared_ptr<Statement> const& stmt() const {
      return  static_cast<Stmt&>(*contents).value();
    }
    CompDecl& comp() const {
      return  static_cast<Comp&>(*contents).value();
    }
    std::shared_ptr<Expression const> const& width() const {
      return  static_cast<Bus&>(*contents).width();
    }
  };

  unsigned QdlParser::nextToken(YYSVal &sval) {
    std::istream &in = m_in;

    while(true) {
      int const  c = in.get();

      // Filter out Operators
      switch(c) {
      case EOF:
	return  0;

      case '-':
	if(in.peek() == '>') {
	  in.get();
	  return  TO;
	}
	return  c;

      case '*':
	if(in.peek() == '*') {
	  in.get();
	  return  POWER;
	}
	return  c;

      case '<':
      case '>':
      case '(':
      case ')':
      case '[':
      case ']':
      case '=':
      case ',':
      case ';':
      case '~':
      case '&':
      case '|':
      case '^':
      case '+':
      case '/':
      case '%':
      case ':':
	return  c;
      }

      // Skip Space
      if(isspace(c))  continue;

      // Keywords and Identifiers
      if(isalpha(c) || (c == '_')) {
	std::string  w(1, (char)c);
	while(true) {
	  int const  cc = in.peek();
	  if(!isalnum(cc) && (cc != '_'))  break;
	  w += (char)in.get();
	}
	if(w == "component")  return  COMPONENT;
	if(w == "config")     return  CONFIG;
	if(w == "signal")     return  SIGNAL;
	if(w == "end")        return  END;

	sval = w;
	return  IDENT;
      }

      // Numbers
      if(isdigit(c)) {
	unsigned  v = c - '0';
	while(true) {
	  if(!isdigit(in.peek()))  break;
	  v = 10*v + (in.get() - '0');
	}
	sval = v;
	return  NUMBER;
      }

      // Error
      error(std::string("Illegal Character: '") + (char)c + "'");
    }
  } // nextToken()
}

%%
%left  POWER
%token NUMBER IDENT TO COMPONENT CONFIG SIGNAL END
%start comp_decl
%%
comp_decl_start : COMPONENT IDENT {
                    $$ = m_lib.declareComponent($2.name());
                  }

comp_decl_gen : comp_decl_start '<' IDENT {
                  $1.comp().addParameter($3.name());
		  $$ = $1;
                }
              | comp_decl_gen ',' IDENT {
                  $1.comp().addParameter($3.name());
		  $$ = $1;
                }

comp_decl_in  : comp_decl_start '(' bus {
                  $1.comp().addPort(PortDecl::Direction::in, $3.name(), $3.width());
		  $$ = $1;
                }
              | comp_decl_gen '>' '(' bus {
                  $1.comp().addPort(PortDecl::Direction::in, $4.name(), $4.width());
		  $$ = $1;
                }
              | comp_decl_in ',' bus {
 		  $1.comp().addPort(PortDecl::Direction::in, $3.name(), $3.width());
		  $$ = $1;
                }
comp_decl_out : comp_decl_in TO bus {
                  $1.comp().addPort(PortDecl::Direction::out, $3.name(), $3.width());
		  $$ = $1;
                }
              | comp_decl_out ',' bus {
 		  $1.comp().addPort(PortDecl::Direction::out, $3.name(), $3.width());
		  $$ = $1;
		}
comp_decl_body: comp_decl_out ')' { $$ = $1; }
              | comp_decl_body stmt ';' {
		  $1.comp().addStatement($2.stmt());
		  $$ = $1;
                }
comp_decl     : comp_decl_body END ';';
              | comp_decl comp_decl_body END ';';

// Statements
stmt	: CONFIG bus { $$ = std::make_shared<ConfigDecl>($2.name(), $2.width()); }
	| SIGNAL bus { $$ = std::make_shared<SignalDecl>($2.name(), $2.width()); }
        | expr '=' expr { $$ = std::make_shared<Equation>($1.expr(), $3.expr()); }
        | inst_out ')' { $$ = $1; }

inst_start : IDENT ':' IDENT {
               $$ = std::make_shared<Instantiation>($1.name(), m_lib.resolveComponent($3.name()));
             }
inst_gen   : inst_start '<' expr {
               static_cast<Instantiation&>(*$1.stmt()).addParameter($3.expr());
	       $$ = $1;
             }
           | inst_gen ',' expr {
               static_cast<Instantiation&>(*$1.stmt()).addParameter($3.expr());
	       $$ = $1;
             }
inst_in    : inst_start '(' expr {
               static_cast<Instantiation&>(*$1.stmt()).addConnection($3.expr());
	       $$ = $1;
             }
           | inst_gen '>' '(' expr {
               static_cast<Instantiation&>(*$1.stmt()).addConnection($4.expr());
	       $$ = $1;
             }
           | inst_in ',' expr {
               static_cast<Instantiation&>(*$1.stmt()).addConnection($3.expr());
	       $$ = $1;
             }

inst_out   : inst_in TO expr {
               static_cast<Instantiation&>(*$1.stmt()).addConnection($3.expr());
	       $$ = $1;
             }
           | inst_out ',' expr {
               static_cast<Instantiation&>(*$1.stmt()).addConnection($3.expr());
	       $$ = $1;
             }

// Bus Declaration
bus	: IDENT {
            $$.makeBus($1.name(), std::make_shared<ConstExpression>(1));
          }
	| IDENT '[' expr ']' {
	    $$.makeBus($1.name(), $3.expr());
	  }

// Expressions
ex_atom	: NUMBER {
            $$ = std::make_shared<ConstExpression>($1.number());
          }
	| IDENT {
            $$ = std::make_shared<NameExpression>($1.name());
          }
	| '~' ex_atom {
	    $$ = std::make_shared<UniExpression>(UniExpression::Op::NOT, $2.expr());
          }
	| '+' ex_atom {
	    $$ = $2;
	  }
	| '-' ex_atom {
	    $$ = std::make_shared<UniExpression>(UniExpression::Op::NEG, $2.expr());
          }
	| '(' expr ')' {
	    $$ = $2;
	  }
        | ex_atom '[' expr ']' {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::SEL, $1.expr(), $3.expr());
          }
	| ex_atom POWER ex_atom {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::POW, $1.expr(), $3.expr());
          }

ex_mult	: ex_atom {
	    $$ = $1;
	  }
	| ex_mult '*' ex_atom {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::MUL, $1.expr(), $3.expr());
          }
	| ex_mult '/' ex_atom {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::DIV, $1.expr(), $3.expr());
          }
	| ex_mult '%' ex_atom {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::MOD, $1.expr(), $3.expr());
          }

ex_logic: ex_mult {
	    $$ = $1;
	  }
	| ex_logic '&' ex_mult {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::AND, $1.expr(), $3.expr());
          }
	| ex_logic '|' ex_mult {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::OR, $1.expr(), $3.expr());
          }
	| ex_logic '^' ex_mult {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::XOR, $1.expr(), $3.expr());
          }

expr	: ex_logic {
	    $$ = $1;
	  }
	| expr '+' ex_logic {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::ADD, $1.expr(), $3.expr());
          }
	| expr '-' ex_logic {
	    $$ = std::make_shared<BiExpression>(BiExpression::Op::SUB, $1.expr(), $3.expr());
          }
